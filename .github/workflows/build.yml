name: Build Docker container for business_card_flask_app

on:
  push:
    # in testing case I use only BC-6
    branches:
      - BC-7

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # clone my code from repo
      - name: Checkout code
        uses: actions/checkout@v2

      # set up for better image Build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

# secrets are defined in GitHub secrets.
# You can define them by your .env file based on sample.env and .env.test based on sample.env.test
# In future I'll add simple config for them to having fun. Maybe also screens how to add them to project's secrets.
#TODO: add values to sample.env.

      # set up for better log in...
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


        # Building images for tests, and pushing them to dockerHub.
        # For now, my app_project is private in docker-hub, but open-source in GitHub  :)
      - name: Build flask_app image
        uses: docker/build-push-action@v4
        with:
          context: .
          # don't send before tests cases.
          cache-from: type=gha
          cache-to: type=gha, mode=max
          push: false
          tags: diiego300years/business_card_app:latest

      - name: Build db_test image
        uses: docker/build-push-action@v4
        with:
          context: ./db_test
          push: false
          tags: diiego300years/db_test_business_card:latest
          # Cache for dependencies and layers
          cache-from: type=gha
          cache-to: type=gha,mode=max

# I defined new job for make this process faster.
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # clone my code from repo
      - name: Checkout code
        uses: actions/checkout@v2

# I used python-dotenv in project that's why.
      - name: Create .env file for app service.
        run: |
          echo "FLASK_APP=${{ secrets.FLASK_APP }}" >> .env
          echo "DOCKER_TEST_SQLALCHEMY_DATABASE_URI=${{ secrets.TEST_DB_URI }}" >> .env
          echo "FLASK_DEBUG=${{ secrets.FLASK_DEBUG }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> .env
          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
          echo "FLASKY_MAIL_SENDER=${{ secrets.FLASKY_MAIL_SENDER }}" >> .env
          echo "MAIL_USE_TLS=${{ secrets.MAIL_USE_TLS }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "FLASKY_ADMIN=${{ secrets.FLASKY_ADMIN }}" >> .env
          echo "FLASK_CONFIG=${{ secrets.FLASK_CONFIG }}" >> .env
          echo "FLASK_APP_NAME=${{ secrets.FLASK_APP_NAME }}" >> .env

      - name: Create .env.test file for db_test service.
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.test
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.test
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env.test
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env.test
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.test

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start db_test service
        run: docker-compose up -d db_test

      - name: Start app
        run: docker-compose up -d app;


      - name: Init and migrate db an in Readme
        run: |
          docker ps
          echo "nw czy dzia≈Ça"
          docker ps -a
          docker exec flask_app flask db init
          docker exec flask_app flask db migrate -m "docker test migrations"
          docker exec flask_app flask db upgrade

      - name: Run tests
        run: docker exec flask_app flask test

      - name: Tear down services
        run: docker-compose down


  deploy:
    runs-on: ubuntu-latest

    # It's similar like depends_on in docker-compose
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push flask_app image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: diiego300years/business_card_app:latest

      - name: Push db_test image
        uses: docker/build-push-action@v4
        with:
          context: ./db_test
          push: true
          tags: diiego300years/db_test_business_card:latest
